{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\react_study\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\NewEvent.js\";\nimport EventForm from \"../components/EventForm\";\nimport { json } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewEvent = () => {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n};\n_c = NewEvent;\nexport default NewEvent;\nexport async function action(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  await request.formData();\n  const response = await fetch(\"http://localhost:8080/events\", {\n    method: \"POST\",\n    body: JSON.stringify()\n  });\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch data!\" };\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events!\" }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: \"Could not fetch events!\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"NewEvent\");","map":{"version":3,"names":["EventForm","json","jsxDEV","_jsxDEV","NewEvent","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","_ref","request","params","formData","response","fetch","method","body","JSON","stringify","ok","message","status","$RefreshReg$"],"sources":["C:/Users/User/Desktop/react_study/12-adv-starting-project/frontend/src/pages/NewEvent.js"],"sourcesContent":["import EventForm from \"../components/EventForm\";\r\nimport { json } from \"react-router-dom\";\r\n\r\nconst NewEvent = () => {\r\n  return <EventForm />;\r\n};\r\n\r\nexport default NewEvent;\r\n\r\nexport async function action({ request, params }) {\r\n  await request.formData();\r\n  const response = await fetch(\"http://localhost:8080/events\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    // return { isError: true, message: \"Could not fetch data!\" };\r\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events!\" }), {\r\n    //   status: 500,\r\n    // });\r\n    throw json({ message: \"Could not fetch events!\" }, { status: 500 });\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,yBAAyB;AAC/C,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,oBAAOD,OAAA,CAACH,SAAS;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACtB,CAAC;AAACC,EAAA,GAFIL,QAAQ;AAId,eAAeA,QAAQ;AAEvB,OAAO,eAAeM,MAAMA,CAAAC,IAAA,EAAsB;EAAA,IAArB;IAAEC,OAAO;IAAEC;EAAO,CAAC,GAAAF,IAAA;EAC9C,MAAMC,OAAO,CAACE,QAAQ,CAAC,CAAC;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IAC3DC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;EACvB,CAAC,CAAC;EAEF,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,MAAMpB,IAAI,CAAC;MAAEqB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL,OAAOR,QAAQ;EACjB;AACF;AAAC,IAAAN,EAAA;AAAAe,YAAA,CAAAf,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}